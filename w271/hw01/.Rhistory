type="l")
abline(h=1-alpha, lty="dotted")
}
pi = 0.6 # true parameter value of the probability of success
alpha = 0.05 # significane level
#n = 10
#w = 0:n
wilson.CI.true.coverage = function(pi, alpha=0.05, n) {
# Objective:
#    Calculate the true confidence level of a Wilson Confidence Interval (given pi, alpha, and n)
# Input:
#    pi: the true parameter value
#    alpha: significance level
#    n: the number of trials
# Return:
#    wald.df: a data.frame containing
#    (1) observed number of success, w
#    (2) pi.tilde (can be considered as adjusted MLE of pi)
#    (3) Binomial probability of obtaining the number of successes from n trials, pmf
#    (4) lower bound of the Wilson confidence interval, wilson.CI_lower.bound
#    (5) upper bound of the Wilson confidence interval, wilson.CI_upper.bound
#    (6) whether or not an interval contains the true parameter, covered.pi
w = 0:n
pmf = dbinom(x=w, size=n, prob=pi)
z = qnorm(p = 1-alpha/2)
pi.tilde = (w + z/2)/(n + qnorm(p = 1-alpha/2))
wilson.CI_lower.bound = pi.tilde - ((z*sqrt(n))/(n+z^2))*sqrt(pi.tilde*(1-pi.tilde)+(z^2)/(4*n))
wilson.CI_upper.bound = pi.tilde + ((z*sqrt(n))/(n+z^2))*sqrt(pi.tilde*(1-pi.tilde)+(z^2)/(4*n))
covered.pi = ifelse(test = pi>wilson.CI_lower.bound,
yes = ifelse(test = pi<wilson.CI_upper.bound, yes=1, no=0), no=0)
wilson.CI.true.coverage = sum(covered.pi*pmf)
wilson.df = data.frame(w, pi.tilde,
round(data.frame(pmf, wilson.CI_lower.bound, wilson.CI_upper.bound),4),
covered.pi)
return(wilson.df)
}
wilson.df
pi.seq = seq(0.01, 0.99, by=0.01)
n_seq = list(10, 50, 100, 500)
for (i in 1:4) {
counter=1
for (pi in pi.seq) {
wilson.df2 = wilson.CI.true.coverage(pi=pi, alpha=0.05, n=n_seq[[i]])
wilson.CI.true.matrix[counter,]=c(pi,sum(wilson.df2$covered.pi*wilson.df2$pmf))
counter = counter+1
}
str(wilson.CI.true.matrix)
wilson.CI.true.matrix[1:5,]
# Plot the true coverage level (for given n and alpha)
plot(x=wilson.CI.true.matrix[,1],
y=wilson.CI.true.matrix[,2],
ylim=c(0,1),
main = "Wilson C.I. True Confidence Level Coverage", xlab=expression(pi),
ylab="True Confidence Level",
type="l")
abline(h=1-alpha, lty="dotted")
}
c(pi,sum(wilson.df2$covered.pi*wilson.df2$pmf))
wilson.CI.true.matrix
counter
wilson.CI.true.matrix[counter,]=c(pi,sum(wilson.df2$covered.pi*wilson.df2$pmf))
pi.seq = seq(0.01, 0.99, by=0.01)
n_seq = list(10, 50, 100, 500)
for (i in 1:4) {
counter=1
for (pi in pi.seq) {
wilson.df2 = wilson.CI.true.coverage(pi=pi, alpha=0.05, n=n_seq[[i]])
wilson.CI.true.matrix[counter,]=c(pi,sum(wilson.df2$covered.pi*wilson.df2$pmf))
counter = counter+1
}
str(wilson.CI.true.matrix)
wilson.CI.true.matrix[1:5,]
# Plot the true coverage level (for given n and alpha)
plot(x=wilson.CI.true.matrix[,1],
y=wilson.CI.true.matrix[,2],
ylim=c(0,1),
main = "Wilson C.I. True Confidence Level Coverage", xlab=expression(pi),
ylab="True Confidence Level",
type="l")
abline(h=1-alpha, lty="dotted")
}
pi = 0.6 # true parameter value of the probability of success
alpha = 0.05 # significane level
#n = 10
#w = 0:n
wilson.CI.true.coverage = function(pi, alpha=0.05, n) {
# Objective:
#    Calculate the true confidence level of a Wilson Confidence Interval (given pi, alpha, and n)
# Input:
#    pi: the true parameter value
#    alpha: significance level
#    n: the number of trials
# Return:
#    wald.df: a data.frame containing
#    (1) observed number of success, w
#    (2) pi.tilde (can be considered as adjusted MLE of pi)
#    (3) Binomial probability of obtaining the number of successes from n trials, pmf
#    (4) lower bound of the Wilson confidence interval, wilson.CI_lower.bound
#    (5) upper bound of the Wilson confidence interval, wilson.CI_upper.bound
#    (6) whether or not an interval contains the true parameter, covered.pi
w = 0:n
pmf = dbinom(x=w, size=n, prob=pi)
z = qnorm(p = 1-alpha/2)
pi.tilde = (w + z/2)/(n + qnorm(p = 1-alpha/2))
wilson.CI_lower.bound = pi.tilde - ((z*sqrt(n))/(n+z^2))*sqrt(pi.tilde*(1-pi.tilde)+(z^2)/(4*n))
wilson.CI_upper.bound = pi.tilde + ((z*sqrt(n))/(n+z^2))*sqrt(pi.tilde*(1-pi.tilde)+(z^2)/(4*n))
covered.pi = ifelse(test = pi>wilson.CI_lower.bound,
yes = ifelse(test = pi<wilson.CI_upper.bound, yes=1, no=0), no=0)
wilson.CI.true.coverage = sum(covered.pi*pmf)
wilson.df = data.frame(w, pi.tilde,
round(data.frame(pmf, wilson.CI_lower.bound, wilson.CI_upper.bound),4),
covered.pi)
return(wilson.df)
}
# define a list containing the 3 n's
# loop over the n's and compute the confidence intervals
df.wilson.CI = list("wilson.df.n10", "wilson.df.n50", "wilson.df.n100", "wilson.df.n500")
n_seq = list(10, 50, 100, 500)
for (i in 1:4) {
print(df.wilson.CI[[i]])
print(n_seq[[i]])
df.wilson.CI[[i]] = wilson.CI.true.coverage(pi=0.6, alpha=0.05, n=n_seq[[i]])
}
pi.seq = seq(0.01, 0.99, by=0.01)
n_seq = list(10, 50, 100, 500)
for (i in 1:4) {
counter=1
for (pi in pi.seq) {
wilson.df2 = wilson.CI.true.coverage(pi=pi, alpha=0.05, n=n_seq[[i]])
wilson.CI.true.matrix[counter,]=c(pi,sum(wilson.df2$covered.pi*wilson.df2$pmf))
counter = counter+1
}
str(wilson.CI.true.matrix)
wilson.CI.true.matrix[1:5,]
# Plot the true coverage level (for given n and alpha)
plot(x=wilson.CI.true.matrix[,1],
y=wilson.CI.true.matrix[,2],
ylim=c(0,1),
main = "Wilson C.I. True Confidence Level Coverage", xlab=expression(pi),
ylab="True Confidence Level",
type="l")
abline(h=1-alpha, lty="dotted")
}
counter
c(pi,sum(wilson.df2$covered.pi*wilson.df2$pmf))
pi
pi.seq
wald.CI.true.matrix
wilson.df2
sum(wilson.df2$covered.pi*wilson.df2$pmf)
countwer
counter
dumb[1,]=1
dumb[1,]=c(1,9)
dumb=matrix(nrows=3,ncols-2)
pi.seq = seq(0.01, 0.99, by=0.01)
n_seq = list(10, 50, 100, 500)
wilson.CI.true.matrix = matrix(data=NA,nrow=length(pi.seq),ncol=2)
for (i in 1:4) {
counter=1
for (pi in pi.seq) {
wilson.df2 = wilson.CI.true.coverage(pi=pi, alpha=0.05, n=n_seq[[i]])
wilson.CI.true.matrix[counter,]=c(pi,sum(wilson.df2$covered.pi*wilson.df2$pmf))
counter = counter+1
}
str(wilson.CI.true.matrix)
wilson.CI.true.matrix[1:5,]
# Plot the true coverage level (for given n and alpha)
plot(x=wilson.CI.true.matrix[,1],
y=wilson.CI.true.matrix[,2],
ylim=c(0,1),
main = "Wilson C.I. True Confidence Level Coverage", xlab=expression(pi),
ylab="True Confidence Level",
type="l")
abline(h=1-alpha, lty="dotted")
}
setwd("~/Documents/Teach/Cal/w271/_2018.03_Fall/hw01/")
setwd("~/Documents/Teach/Cal/w271/_2018.03_Fall/hw01")
setwd("~/Documents/Teach/Cal/w271/_2018.03_Fall/hw/hw01")
wd <- getwd()
wd
df =read.csv(file="placekick.BW.csv", header=TRUE, sep=",")
str(df)
mod.glm1<-glm(formula = good ~ distance + Weather + Wind15 + Temperature + Grass + Pressure + Ice, family = binomial(link = logit), data = placekick)
mod.glm1<-glm(formula = good ~ distance + Weather + Wind15 + Temperature + Grass + Pressure + Ice, family = binomial(link = logit), data = df)
str(df)
mod.glm1<-glm(formula = Good ~ Distance + Weather + Wind15 + Temperature + Grass + Pressure + Ice, family = binomial(link = logit), data = df)
summary(mod.glm1)
library(Hmisc)
describe(df)
str(df)
str(df$Weather)
levels(df$Weather)
mod.glm1b<-glm(formula = Good ~ Distance + Weather + Wind15 + Temperature + Grass + Pressure + Ice, family = binomial(link = logit), data = df)
summary(mod.glm1b)
df$Weather = factor(df$Weather, labels = c("Sun", "Clouds", "Inside", "SnowRain"))
mod.glm1b<-glm(formula = Good ~ Distance + Weather + Wind15 + Temperature + Grass + Pressure + Ice, family = binomial(link = logit), data = df)
summary(mod.glm1b)
mod.glm1.ci <- confint(object = mod.glm1, level = 0.95)
# Import libraries
library(Hmisc)
# Set working directory
setwd("~/Documents/Teach/Cal/w271/_2018.03_Fall/hw/hw01")
# Load Data
df =read.csv(file="placekick.BW.csv", header=TRUE, sep=",")
# Examine the data structure
str(df)
describe(df)
mod.glm1<-glm(formula = Good ~ Distance + Weather + Wind15 + Temperature + Grass + Pressure + Ice, family = binomial(link = logit), data = df)
summary(mod.glm1)
mod.glm1.ci <- confint(object = mod.glm1, level = 0.95)
mod.glm1$coefficients[1
exp(-10*mod.glm1$coefficients[1])
mod.glm1$coefficients[1]
mod.glm1$coefficients[2]
exp(-10*mod.glm1$coefficients[2])
mod.glm1.ci <- confint(object = mod.glm1, adjust="bonferroni", level = 0.95)
system.time(mod.glm1.ci <- confint(object = mod.glm1, adjust="bonferroni", level = 0.95))
mod.glm1.ci
system.time(mod.glm1.ci <- confint(object = mod.glm1, level = 0.95))
mod.glm1.ci
exp(mod.glm1.ci)
library(car)
Anova(mod.glm1, test="LR" )
exp(-10*beta.ci[2])
exp(-10*mod.glm1.ci[2])
Distance.CI = confint(object = mod.glm1, parm="Distance",  level = 0.95)
exp(-10*Distance.CI)
rm(list = ls())
library(car)
require(dplyr)
library(Hmisc)
library(stargazer)
str(Mroz)
ggplot(Mroz, aes(factor(k5), age)) +
geom_boxplot(aes(fill = factor(k5))) +
geom_jitter() +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(age, fill = factor(k5), colour = factor(k5))) +
geom_density(alpha=0.2) +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(factor(k5), lfp)) +
geom_boxplot(aes(fill = factor(k5)))
ggplot(Mroz, aes(factor(wc), age)) +
geom_boxplot(aes(fill = factor(wc)))
ggplot(Mroz, aes((factor(wc), age), lfp)) +
ggplot(Mroz, aes(age, lfp)) +
geom_boxplot(aes(colour = factor(wc)))
ggplot(Mroz, aes(lfp,age)) +
geom_boxplot(aes(colour = factor(wc)))
ggplot(Mroz, aes(lfp,age)) +
geom_boxplot(aes(colour = factor(wc))) +
labs(title = "LFP by Age and Wife's College Attendance Status")
Mroz['totalKids'] <- Mroz$k5 + Mroz$k618
str(Mroz)
table(Mroz$totalKids)
ggplot(Mroz, aes(totalKids, lfp)) +
geom_boxplot(aes(fill = factor(totalKids))) +
geom_jitter() +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(totalKids, lfp)) +
geom_boxplot(aes(fill = factor(totalKids))) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(factor(totalKids), lfp)) +
geom_boxplot(aes(fill = factor(totalKids))) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, totalKids)) +
geom_boxplot(aes(fill = factor(totalKids))) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
p <- ggplot(Mroz, aes(age, inc, colour = lfp)) + geom_point()
p + labs(colour = "Title")
ggplot(Mroz, aes(factor(k5), lfp)) +
geom_boxplot(aes(fill = factor(k5))) +
geom_jitter() +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(factor(k5), lfp)) +
geom_boxplot(aes(fill = lfp)) +
geom_jitter() +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, factor(k5) +
geom_boxplot() +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, factor(k5)) +
ggplot(Mroz, aes(lfp, k5) +
geom_boxplot() +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, k5))+
geom_boxplot(aes(fill = factor(k5))) +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp,age)) +
geom_boxplot(aes(colour = factor(wc))) +
labs(title = "LFP by Age and Wife's College Attendance Status")
ggplot(Mroz, aes(lfp,inc)) +
geom_boxplot(aes(colour = factor(wc))) +
labs(title = "LFP by Income and Wife's College Attendance Status")
b <- c(-1, 1, 2, Inf)
names <- c("No", "1", "2+")
Mroz$kid5.cat = cut(Mroz$k5, breaks=b, labels=names)
Mroz$kid5.cat
b <- c(-1, 1, 2, Inf)
names <- c("0", "1", "2+")
Mroz$kid5.cat = cut(Mroz$k5, breaks=b, labels=names)
table(Mroz$kid5.cat)
b <- c(-1, 0, 1, Inf)
names <- c("0", "1", "2+")
Mroz$kid5.cat = cut(Mroz$k5, breaks=b, labels=names)
table(Mroz$kid5.cat)
ggplot(Mroz, aes(lfp, k5))+
geom_boxplot(aes(fill = factor(k5))) +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(factor(wc),inc)) +
geom_boxplot(aes(colour = factor(wc))) +
labs(title = "LFP by Income and Wife's College Attendance Status")
ggplot(Mroz, aes(lfp, factor(wc))) +
geom_boxplot(aes(colour = inc)) +
labs(title = "LFP by Income and Wife's College Attendance Status")
ggplot(Mroz, aes(lfp, inc))+
geom_boxplot(aes(fill = factor(k5))) +
ggtitle("Age by Number of kids younger than 6") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, inc)) +
geom_boxplot(aes(colour = factor(wc))) +
labs(title = "LFP by Income and Wife's College Attendance Status")
ggplot(Mroz, aes(lfp,age)) +
geom_boxplot(aes(colour = age)) +
labs(title = "LFP by Age")
ggplot(Mroz, aes(lfp, age)) +
geom_boxplot(aes(fill = age)) +
labs(title = "LFP by Age")
ggplot(Mroz, aes(lfp,age)) +
geom_boxplot(aes(colour = factor(wc))) +
labs(title = "LFP by Age and Wife's College Attendance Status")
ggplot(Mroz, aes(lfp, totalKids)) +
geom_boxplot(aes(fill = factor(totalKids))) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(totalKids, lfp)) +
geom_boxplot(aes(fill = factor(totalKids))) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
table(Mroz['totalKids'])
Mroz['totalKids'] = 4 if Mroz['totalKids'] > 4
Mroz$totalKids[Mroz['totalKids'] > 4] = 4
table(Mrzo['totalKids'])
table(Mroz['totalKids'])
ggplot(Mroz, aes(totalKids, lfp)) +
geom_boxplot(aes(fill = factor(totalKids))) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, totalKids)) +
geom_boxplot(aes(fill = factor(totalKids))) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, totalKids)) +
geom_boxplot(aes(fill = lfp) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, totalKids)) +
ggplot(Mroz, aes(lfp, totalKids) +
geom_boxplot(aes(colour = lfp) +
ggtitle("Age by the Total Number of Kids") +
theme(plot.title = element_text(lineheight=1, face="bold"))
ggplot(Mroz, aes(lfp, totalKids)) +
str(Mroz)
mroz.glm2 <- glm(lfp ~ totalKids + age + wc + hc + lwg + inc
+ inc:wc + inc:age + inc:totalKids + I(inc), family = 'binomial', data = Mroz)
mroz.glm1 <- glm(lfp ~ totalKids + age + wc + hc + lwg + inc,
family = 'binomial', data = Mroz)
stargazer(mroz.glm1, mroz.glm2, type = 'text')
mroz.glm2 <- glm(lfp ~ totalKids + age + wc + hc + lwg + inc
+ inc:wc + inc:age + inc:totalKids + I(inc^2), family = 'binomial', data = Mroz)
# Display both Model 1 and Model 2
stargazer(mroz.glm1, mroz.glm2, type = 'text')
mroz.old.glm <- glm(lfp ~ k5 + k618 + age + wc + hc + lwg + inc,
family = 'binomial', data = Mroz)
summary(mroz.old.glm)
## The right way to do it
newdf <- data.frame(k5 = 3,
k618 = 0,
age = seq(from = 30, to = 60, by = 1),
wc = 'no',
hc = 'no',
lwg = mean(Mroz$lwg),
inc = mean(Mroz$inc))
lp.hat <- predict.glm(mroz.old.glm, newdata = newdf, type = "link", se.fit = TRUE)
head(lp.hat)
lp.hat.mean <- lp.hat$fit
lp.hat.lci <- lp.hat$fit - 1.96 * lp.hat$se.fit
lp.hat.uci <- lp.hat$fit + 1.96 * lp.hat$se.fit
pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
pi.hat.lci <- exp(lp.hat.lci) / (1 + exp(lp.hat.lci))
pi.hat.uci <- exp(lp.hat.uci) / (1 + exp(lp.hat.uci))
### Plot predicted probabilities
age <- newdf$age
plot(age, pi.hat, ylim = range(c(pi.hat.lci, pi.hat.uci)),
xlab = "Age", ylab = "Predicted Prob of LFP = 1", type = 'l', col = 'red', lwd = 2)
lines(age, pi.hat.lci, col = 'red', lwd = 0.5)
lines(age, pi.hat.uci, col = 'red', lwd = 0.5)
#### The wrong way
pi.hat.response <- predict.glm(mroz.old.glm, newdf, type = "response", se.fit = TRUE)
pi.hat.response.lci <- pi.hat.response$fit - 1.96*pi.hat.response$se.fit
pi.hat.response.uci <- pi.hat.response$fit + 1.96*pi.hat.response$se.fit
plot(age, pi.hat.response$fit, ylim = range(c(pi.hat.response.lci, pi.hat.response.uci)),
xlab = "Age", ylab = "Predicted Prob of LFP = 1", type = 'l', col = 'red', lwd = 2)
lines(age, pi.hat.response.lci, col = 'red', lwd = 0.5)
lines(age, pi.hat.response.uci, col = 'red', lwd = 0.5)
anova(mroz.glm1, mroz.glm2, test = "Chisq")
mroz.old.glm <- glm(lfp ~ k5 + k618 + age + wc + hc + lwg + inc,
family = 'binomial', data = Mroz)
summary(mroz.old.glm)
## The right way to do it
newdf <- data.frame(k5 = 3,
k618 = 0,
age = seq(from = 30, to = 60, by = 1),
wc = 'no',
hc = 'no',
lwg = mean(Mroz$lwg),
inc = mean(Mroz$inc))
lp.hat <- predict.glm(mroz.old.glm, newdata = newdf, type = "link", se.fit = TRUE)
head(lp.hat)
lp.hat.mean <- lp.hat$fit
lp.hat.lci <- lp.hat$fit - 1.96 * lp.hat$se.fit
lp.hat.uci <- lp.hat$fit + 1.96 * lp.hat$se.fit
pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
pi.hat.lci <- exp(lp.hat.lci) / (1 + exp(lp.hat.lci))
pi.hat.uci <- exp(lp.hat.uci) / (1 + exp(lp.hat.uci))
### Plot predicted probabilities
age <- newdf$age
plot(age, pi.hat, ylim = range(c(pi.hat.lci, pi.hat.uci)),
xlab = "Age", ylab = "Predicted Prob of LFP = 1", type = 'l', col = 'red', lwd = 2)
lines(age, pi.hat.lci, col = 'red', lwd = 0.5)
lines(age, pi.hat.uci, col = 'red', lwd = 0.5)
#### The wrong way
pi.hat.response <- predict.glm(mroz.old.glm, newdf, type = "response", se.fit = TRUE)
pi.hat.response.lci <- pi.hat.response$fit - 1.96*pi.hat.response$se.fit
pi.hat.response.uci <- pi.hat.response$fit + 1.96*pi.hat.response$se.fit
plot(age, pi.hat.response$fit, ylim = range(c(pi.hat.response.lci, pi.hat.response.uci)),
xlab = "Age", ylab = "Predicted Prob of LFP = 1", type = 'l', col = 'blue', lwd = 2)
lines(age, pi.hat.response.lci, col = 'blue', lwd = 0.5)
lines(age, pi.hat.response.uci, col = 'blue', lwd = 0.5)
summary(Mroz$age)
sd(Mroz$age)
1/exp(16*coefficients(mroz.glm)[['age']])
1/exp(8*coefficients(mroz.glm1)[['age']])
mean(Mroz$inc)
1/exp(8*(coefficients(mroz.glm2)[['age']] + coefficients(mroz.glm2)[['inc']]*20)
1/exp(8*(coefficients(mroz.glm2)[['age']] + coefficients(mroz.glm2)[['inc']]*20))
coefficients(mroz.glm2)[['inc']]
coefficients(mroz.glm2)[['inc']]*20
coefficients(mroz.glm2)[['age']]
coefficients(mroz.glm2)[['age']] + coefficients(mroz.glm2)[['inc']]*20
(coefficients(mroz.glm2)[['age']] + coefficients(mroz.glm2)[['inc']]*20)*8
(coefficients(mroz.glm2)[['age']] + coefficients(mroz.glm2)[['inc']]*20)*8)
exp((coefficients(mroz.glm2)[['age']] + coefficients(mroz.glm2)[['inc']]*20)*8)
exp(-8*coefficients(mroz.glm1)[['age']])
mean(Mroz$inc)
stargazer(mroz.glm1, mroz.glm2, type = 'text')
mean(Mroz$inc)
exp(-20*coefficients(mroz.glm1)[['age']])
sd(Mroz$inc)
exp(-12*coefficients(mroz.glm1)[['inc']])
exp(12*coefficients(mroz.glm1)[['inc']])
1/exp(12*coefficients(mroz.glm1)[['inc']])
exp(-12*coefficients(mroz.glm1)[['inc']])
mroz.glm2 <- glm(lfp ~ totalKids + age + wc + hc + lwg + inc
+ inc:wc, family = 'binomial', data = Mroz)
stargazer(mroz.glm1, mroz.glm2, type = 'text')
exp(-12*coefficients(mroz.glm1)[['inc']])
exp(-12*(coefficients(mroz.glm2)[['inc']] + +coefficients(mroz.glm2)[['wcyes']]*0))
exp(-12*(coefficients(mroz.glm2)[['inc']] + +coefficients(mroz.glm2)[['wcyes']]*1))
exp(-12*(coefficients(mroz.glm2)[['inc']] + coefficients(mroz.glm2)[['wcyes']]*1))
exp(-12*(coefficients(mroz.glm2)[['inc']])
)
exp(-12*(coefficients(mroz.glm2)[['inc']])
)
exp(-12*(coefficients(mroz.glm2)[['inc']] + coefficients(mroz.glm2)[['wcyes']] ) )
c = -12
wcyes = c(0,1)
OR.inc = exp(c*(coefficients(mroz.glm2)[['inc']] + coefficients(mroz.glm2)[['wcyes']]*wcyes))
OR.inc
# Model 1 (Base Model)
mroz.glm1 <- glm(lfp ~ totalKids + age + wc + hc + lwg + inc,
family = 'binomial', data = Mroz)
# Model 2 (Model with Interaction and Non-linear Variables)
mroz.glm2 <- glm(lfp ~ totalKids + age + wc + hc + lwg + inc
+ inc:wc, family = 'binomial', data = Mroz)
# Display both Model 1 and Model 2
stargazer(mroz.glm1, mroz.glm2, type = 'text')
### Interpreting inc for model 1 (increment of $12k)
exp(-12*coefficients(mroz.glm1)[['inc']])
### Interpreting inc for model 2,
c = -12
wcyes = c(0,1)
OR.inc = exp(c*(coefficients(mroz.glm2)[['inc']] + coefficients(mroz.glm2)[['wcyes']]*wcyes))
OR.inc
OR.inc = exp(c*(coefficients(mroz.glm2)[['inc']] + coefficients(mroz.glm2)[['wcyes:inc']]*wcyes))
OR.inc
vcov(mroz.glm2)
anova(mroz.glm1, mroz.glm2, test = "Chisq")
sd(Mroz$inc)
