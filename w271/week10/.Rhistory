# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,5), seasonal= c(1,0,1))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,4), seasonal= c(1,0,2))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,4), seasonal= c(2,0,2))
summary(ts.season)
#checkresiduals(ts.season)
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
df2010 <- d[ which(d$flight.prices & d$Date > '12/21/09'), ]
tr_2010_2014 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2014, 12))
test.2015 <- ts(d$flight.prices, frequency=52, start=c(2015,1))
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
class(d$Date)
#df2010 <- d[ which(d$flight.prices & d$Date > '12/21/09'), ]
tr_2010_2014 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2014, 12))
test.2015 <- ts(d$flight.prices, frequency=52, start=c(2015,1))
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
#class(d$Date)
df <- d %>% select(Date, flight.prices)
tr_2010_2014 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2014, 12))
test.2015 <- ts(d$flight.prices, frequency=52, start=c(2015,1))
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,4), seasonal= c(1,1,1))
summary(ts.season)
#checkresiduals(ts.season)
fit.tslm <- tslm(tr_2010_2014 ~ trend + season)
autoplot(f.cast) + ggtitle("Forecasted Flight Prices for 2015") + xlab("Year") + ylab("Price")
fit.tslm <- tslm(tr_2010_2014 ~ trend + season)
autoplot(fit.tslm) + ggtitle("Forecasted Flight Prices for 2015") + xlab("Year") + ylab("Price")
f.cast <- forecast(fit.tslm, h=52)
f.cast <- forecast(fit.tslm, h=52)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
f.cast <- forecast(fit.tslm, h=204)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
f.cast <- forecast(fit.tslm, h=104)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
plot(cbind(tr_2010_2014, test.2015))
plot(test.2015))
plot(test.2015)
f.cast <- forecast(fit.tslm, h=52)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
# Insert the function to *tidy up* the code when they are printed out
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Clean up the workspace before we begin
rm(list = ls())
# Set working directory
wd <- "~/Documents/Teach/Cal/w271/_2018.03_Fall/live-session-files/week09"
#setwd(wd)
# Load libraries
library(forecast)
library(fpp2)
library(astsa)
library(dplyr)
library(Hmisc)
d <- read.csv("correlate-flight_prices.csv", header=TRUE, sep=',')
# Exmaine the data
head(d)
tail(d)
str(d)
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
#class(d$Date)
df <- d %>% select(Date, flight.prices)
tr_2010_2014 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2014, 12))
test.2015 <- ts(d$flight.prices, frequency=52, start=c(2015,1))
# EDA
#par(mfrow=c(2,2))
plot(tr_2010_2014, main='Flight Prices: 2010 - 2014', ylab='Value')
hist(tr_2010_2014, breaks=seq(-9.5, 9.5, by=1))
acf(tr_2010_2014, main='ACF of Flight Prices')
pacf(tr_2010_2014, main='PACF of Flight Prices')
tr_2010_2014 %>% ggtsdisplay()
tr_2010_2014 %>% diff(1) %>% ggtsdisplay()
tr_2010_2014 %>% diff(52) %>% ggtsdisplay()
tr_2010_2014 %>% diff() %>% acf(lag=104)
# Let's start by modeling it as a pure AR process
ts.ar <- Arima(tr_2010_2014, order = c(1,0,0))
summary(ts.ar)
checkresiduals(ts.ar)
# Let's model using a pure MA process
ts.ma <- Arima(tr_2010_2014, order=c(0,0,1))
summary(ts.ma)
checkresiduals(ts.ma)
# Let's look at some ARIMA models
ts.arima <- Arima(tr_2010_2014, order=c(0,1,1))
summary(ts.arima)
checkresiduals(ts.arima)
# Let's look at some ARIMA models
ts.arima2 <- Arima(tr_2010_2014, order=c(0,1,2))
summary(ts.arima2)
checkresiduals(ts.arima2)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,1,1), seasonal= c(1,0,0))
summary(ts.season)
checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,4), seasonal= c(1,1,1))
summary(ts.season)
#checkresiduals(ts.season)
flt.lm <- lm(tr_2010_2014 ~ time(tr_2010_2014))
acf(resid(flt.lm))
find.best <- c(0,0,0)
best.aic <- Inf
for (i in 0:5) for (j in 0:4) {
fit.aic <- AIC(arima(resid(flt.lm), order = c(i,0,j)))
if (fit.aic <- best.aic) {
best.order <- c(i,0,j)
best.arma <- arima(resid(flt.lm), order = best.order)
best.aic <- fit.aic
}
}
best.order
#ts.season > Arima fitted w season
pred.2015 <- predict(ts.season, n.ahead = 104)
plot(pred.2015$pred)
fit.tslm <- tslm(tr_2010_2014 ~ trend + season)
#autoplot(fit.tslm) + ggtitle("Forecasted Flight Prices for 2015") + #xlab("Year") + ylab("Price")
f.cast <- forecast(fit.tslm, h=52)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
plot(test.2015)
#ts.season > Arima fitted w season
pred.2015 <- predict(ts.season, n.ahead = 52)
plot(pred.2015$pred)
f.cast <- forecast(fit.tslm, h=52)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
f.cast <- forecast(fit.tslm, h=104)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
fit.tslm <- lm(tr_2010_2014 ~ trend + season)
fit.tslm <- tslm(tr_2010_2014 ~ trend + season)
#autoplot(fit.tslm) + ggtitle("Forecasted Flight Prices for 2015") + #xlab("Year") + ylab("Price")
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
#class(d$Date)
df <- d %>% select(Date, flight.prices)
tr_2010_2014 <- ts(d$flight.prices, frequency = 52.1775, start = c(2010,1), end=c(2014, 12))
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
#class(d$Date)
df <- d %>% select(Date, flight.prices)
tr_2010_2014 <- ts(d$flight.prices, frequency = 52.18, start = c(2010,1), end=c(2014, 12))
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
#class(d$Date)
df <- d %>% select(Date, flight.prices)
tr_2010_2014 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2014, 12))
test.2015 <- ts(d$flight.prices, frequency=52, start=c(2015,1))
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
#class(d$Date)
df <- d %>% select(Date, flight.prices)
tr_2010_2014 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2015, 1))
test.2015 <- ts(d$flight.prices, frequency=52, start=c(2015,1))
# EDA
#par(mfrow=c(2,2))
plot(tr_2010_2014, main='Flight Prices: 2010 - 2014', ylab='Value')
hist(tr_2010_2014, breaks=seq(-9.5, 9.5, by=1))
acf(tr_2010_2014, main='ACF of Flight Prices')
pacf(tr_2010_2014, main='PACF of Flight Prices')
# EDA
#par(mfrow=c(2,2))
plot(tr_2010_2014, main='Flight Prices: 2010 - 2014', ylab='Value')
hist(tr_2010_2014, breaks=seq(-9.5, 9.5, by=1))
acf(tr_2010_2014, main='ACF of Flight Prices')
pacf(tr_2010_2014, main='PACF of Flight Prices')
tr_2010_2014 %>% ggtsdisplay()
tr_2010_2014 %>% diff(1) %>% ggtsdisplay()
tr_2010_2014 %>% diff(52) %>% ggtsdisplay()
tr_2010_2014 %>% diff() %>% acf(lag=104)
# Let's start by modeling it as a pure AR process
ts.ar <- Arima(tr_2010_2014, order = c(1,0,0))
summary(ts.ar)
checkresiduals(ts.ar)
# Let's model using a pure MA process
ts.ma <- Arima(tr_2010_2014, order=c(0,0,1))
summary(ts.ma)
checkresiduals(ts.ma)
# Let's look at some ARIMA models
ts.arima <- Arima(tr_2010_2014, order=c(0,1,1))
summary(ts.arima)
checkresiduals(ts.arima)
# Let's look at some ARIMA models
ts.arima2 <- Arima(tr_2010_2014, order=c(0,1,2))
summary(ts.arima2)
checkresiduals(ts.arima2)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,1,1), seasonal= c(1,0,0))
summary(ts.season)
checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,4), seasonal= c(1,1,1))
summary(ts.season)
#checkresiduals(ts.season)
flt.lm <- lm(tr_2010_2014 ~ time(tr_2010_2014))
acf(resid(flt.lm))
find.best <- c(0,0,0)
best.aic <- Inf
for (i in 0:5) for (j in 0:4) {
fit.aic <- AIC(arima(resid(flt.lm), order = c(i,0,j)))
if (fit.aic <- best.aic) {
best.order <- c(i,0,j)
best.arma <- arima(resid(flt.lm), order = best.order)
best.aic <- fit.aic
}
}
best.order
#ts.season > Arima fitted w season
pred.2015 <- predict(ts.season, n.ahead = 52)
plot(pred.2015$pred)
fit.tslm <- tslm(tr_2010_2014 ~ trend + season)
#autoplot(fit.tslm) + ggtitle("Forecasted Flight Prices for 2015") + #xlab("Year") + ylab("Price")
f.cast <- forecast(fit.tslm, h=104)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
plot(test.2015)
flt.lm <- lm(tr_2010_2014 ~ time(tr_2010_2014))
acf(resid(flt.lm))
p.2015 <- predict(flt.lm, n.ahead=52)
plot(p.2015$pred)
p.2015 <- predict(flt.lm, n.ahead=52)
plot(p.2015)
p.2015 <- predict(flt.lm, h=53)
plot(p.2015)
p.2015 <- predict(flt.lm, h=53)
plot(p.2015)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,4), seasonal= c(1,0,1))
summary(ts.season)
#checkresiduals(ts.season)
find.best <- c(0,0,0)
best.aic <- Inf
for (i in 0:5) for (j in 0:4) {
fit.aic <- AIC(arima(resid(flt.lm), order = c(i,0,j)))
if (fit.aic <- best.aic) {
best.order <- c(i,0,j)
best.arma <- arima(resid(flt.lm), order = best.order)
best.aic <- fit.aic
}
}
best.order
flt.lm <- lm(tr_2010_2014 ~ time(tr_2010_2014))
acf(resid(flt.lm))
#ts.season > Arima fitted w season
pred.2015 <- predict(ts.season, n.ahead = 52)
plot(pred.2015$pred)
f.cast <- forecast(fit.tslm, h=104)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
f.cast <- forecast(fit.tslm, h=53)
autoplot(f.cast) + ggtitle("Forecast Flight Prices: 2015") + xlab("Date") + ylab("Price")
plot(test.2015)
actual_2010_2015 <- ts(d$flight.prices, frequency = 52, start = c(2010,1))
actual_2010_2015 <- ts(d$flight.prices, frequency = 52, start = c(2010,1))
plot(actual_2010_2015)
actual_2010_2015 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2015,12))
plot(actual_2010_2015)
actual_2010_2015 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2015,52))
plot(actual_2010_2015)
# Insert the function to *tidy up* the code when they are printed out
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Clean up the workspace before we begin
rm(list = ls())
# Set working directory
wd <- "~/Documents/Teach/Cal/w271/_2018.03_Fall/live-session-files/week09"
#setwd(wd)
# Load libraries
library(forecast)
library(fpp2)
library(astsa)
library(dplyr)
library(Hmisc)
flt.lm <- lm(tr_2010_2014 ~ time(tr_2010_2014))
# Insert the function to *tidy up* the code when they are printed out
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Clean up the workspace before we begin
#rm(list = ls())
# Set working directory
#wd <- "~/Documents/Teach/Cal/w271/_2018.03_Fall/live-session-files/week09"
#setwd(wd)
# Load libraries
library(forecast)
library(fpp2)
library(astsa)
library(dplyr)
library(Hmisc)
d <- read.csv("correlate-flight_prices.csv", header=TRUE, sep=',')
# Exmaine the data
head(d)
tail(d)
str(d)
# Subset the data frame to include only the flight.prices series
# Lets keep data between 2010 and 2014. Let's hold out 2015 as test data that you can use later.
# Create an R time-series object
#class(d$Date)
df <- d %>% select(Date, flight.prices)
tr_2010_2014 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2015, 1))
test.2015 <- ts(d$flight.prices, frequency=52, start=c(2015,1))
# EDA
#par(mfrow=c(2,2))
plot(tr_2010_2014, main='Flight Prices: 2010 - 2014', ylab='Value')
hist(tr_2010_2014, breaks=seq(-9.5, 9.5, by=1))
acf(tr_2010_2014, main='ACF of Flight Prices')
pacf(tr_2010_2014, main='PACF of Flight Prices')
tr_2010_2014 %>% ggtsdisplay()
tr_2010_2014 %>% diff(1) %>% ggtsdisplay()
tr_2010_2014 %>% diff(52) %>% ggtsdisplay()
tr_2010_2014 %>% diff() %>% acf(lag=104)
# Let's start by modeling it as a pure AR process
ts.ar <- Arima(tr_2010_2014, order = c(1,0,0))
summary(ts.ar)
checkresiduals(ts.ar)
# Let's model using a pure MA process
ts.ma <- Arima(tr_2010_2014, order=c(0,0,1))
summary(ts.ma)
checkresiduals(ts.ma)
# Let's look at some ARIMA models
ts.arima <- Arima(tr_2010_2014, order=c(0,1,1))
summary(ts.arima)
checkresiduals(ts.arima)
# Let's look at some ARIMA models
ts.arima2 <- Arima(tr_2010_2014, order=c(0,1,2))
summary(ts.arima2)
checkresiduals(ts.arima2)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,1,1), seasonal= c(1,0,0))
summary(ts.season)
checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,4), seasonal= c(1,0,1))
summary(ts.season)
#checkresiduals(ts.season)
flt.lm <- lm(tr_2010_2014 ~ time(tr_2010_2014))
acf(resid(flt.lm))
find.best <- c(0,0,0)
best.aic <- Inf
for (i in 0:5) for (j in 0:4) {
fit.aic <- AIC(arima(resid(flt.lm), order = c(i,0,j)))
if (fit.aic <- best.aic) {
best.order <- c(i,0,j)
best.arma <- arima(resid(flt.lm), order = best.order)
best.aic <- fit.aic
}
}
best.order
#ts.season > Arima fitted w season
pred.2015 <- predict(ts.season, n.ahead = 52)
plot(pred.2015$pred)
f.cast <- forecast(fit.tslm, h=53)
actual_2010_2015 <- ts(d$flight.prices, frequency = 52, start = c(2010,1), end=c(2015,52))
plot(actual_2010_2015)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,5), seasonal= c(1,0,1))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,3), seasonal= c(1,0,1))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,2,2), seasonal= c(1,0,1))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,1,1), seasonal= c(1,0,1))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,1,1), seasonal= c(1,0,2))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(0,1,1), seasonal= c(2,0,2))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(5,0,4), seasonal= c(1,0,1))
summary(ts.season)
#checkresiduals(ts.season)
# YOUR CODE HERE
ts.season <- Arima(tr_2010_2014, order = c(5,0,4), seasonal= c(1,0,2))
summary(ts.season)
#checkresiduals(ts.season)
#sessionInfo()
# Insert the function to *tidy up* the code when they are printed out
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Clean up the workspace before we begin
rm(list = ls())
# Set working directory
wd <- "~/Documents/Teach/Cal/w271/course-main-dev/live-session-files/week10"
setwd(wd)
#sessionInfo()
# Insert the function to *tidy up* the code when they are printed out
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Clean up the workspace before we begin
rm(list = ls())
# Set working directory
#wd <- "~/Documents/Teach/Cal/w271/course-main-dev/live-session-files/week10"
#setwd(wd)
# Load libraries
library(car)
library(dplyr)
library(Hmisc)
library(forecast)
library(fpp2)
library(astsa)
library(xts)
library(vars)
install.packages("vars")
library("vars", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
#sessionInfo()
# Insert the function to *tidy up* the code when they are printed out
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Clean up the workspace before we begin
rm(list = ls())
# Set working directory
#wd <- "~/Documents/Teach/Cal/w271/course-main-dev/live-session-files/week10"
#setwd(wd)
# Load libraries
library(car)
library(dplyr)
library(Hmisc)
library(forecast)
library(fpp2)
library(astsa)
library(xts)
library(vars)
args(VAR)
args(VARselect)
data("Canada")
str(Canada)
head(Canada)
plot.ts(Canada, main="4 Macro Time Series of the Canadian Economy")
# Alternvative, we can use autoplot
# for some reasons, embedded autoplot() within for-loop doesn't print the graph
for (k in 1:ncol(Canada)) {
autoplot(Canada[,k])
}
tsplot <- function(series) {
autoplot(series)
}
for (k in 1:ncol(Canada)) {
#print(paste("Plot ", k))
tsplot(Canada[,k])
}
par(mfrow=c(2,2))
autoplot(Canada[,1])
autoplot(Canada[,2])
autoplot(Canada[,3])
autoplot(Canada[,4])
# Scatterplot Matrix, which displays the contemporaneous correlation
scatterplotMatrix(~Canada[,1]+Canada[,2]+Canada[,3]+Canada [,4]);
title("Contemporaneous Correlation of the 4 Macroeconomic Series ")
# Time series plot, ACF and PACF of each of the individual series
tsplot <- function(series, title) {
par(mfrow=c(2,2))
hist(series, main=""); title(title)
plot.ts(series, main=""); title(title)
acf(series, main=""); title(paste("ACF",title))
pacf(series, main=""); title(paste("ACF",title))
}
tsplot(Canada[,1], "Employment")
tsplot(Canada[,2], "Productivity")
tsplot(Canada[,3], "Real Wage")
tsplot(Canada[,4], "Unmployment Rate")
# Correlation and Cross-correlation between the two series
par(mfrow=c(1,1))
corrfunc <- function(series1, series2) {
cat("Correlation Matrix: ", cor(series1, series2))
ccf(series1,series2)
}
#corrfunc(Canada[,1],Canada[,2])
for (i in 1:4) {
for (j in 1:4) {
if (i != j & j > i) {
corrfunc(Canada[,i],Canada[,j])
}
}
}
VARselect(Canada, lag.max = 8, type = "both")
var.fit1 <- VAR(Canada, p = 1, type = "both")
summary(var.fit1)
names(var.fit1)
summary(var.fit1)
plot(var.fit1)
roots(var.fit1)
# Test of normality:
var.fit1.norm <- normality.test(var.fit1, multivariate.only = TRUE)
names(var.fit1.norm)
var.fit1.norm
# Test of no serial correlation:
var.fit1.ptasy <- serial.test(var.fit1, lags.pt = 12, type = "PT.asymptotic")
var.fit1.ptasy
plot(var.fit1.ptasy)
