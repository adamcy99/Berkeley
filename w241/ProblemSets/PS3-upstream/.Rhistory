paste("The associated cluster-robust p-value is", signif(coeftestvalues[2,4],3))
data1f <- d
data1f <- d
data1f$isStudy2 <- 0 if data1f$studyno == 1
data1f <- d
data1f$isStudy2 <- ifelse(data1f$studyno == 2, 1, 0)
View(data1f)
# Create new dataframe but create a dummy variable for study number
data1f <- d
data1f$isStudy2 <- ifelse(data1f$studyno == 2, 1, 0)
# Put regression through function to get lbound, ubound, cluster.se
ans <- processcluster(model1.f, row = 2, z_val = 1.96)
# Create new dataframe but create a dummy variable for study number
data1f <- d
data1f$isStudy2 <- ifelse(data1f$studyno == 2, 1, 0)
# Create regression, but this time include dummy variable
model1.f <- lm(name_recall~treat_ad + isStudy2, data = data1f)
# Put regression through function to get lbound, ubound, cluster.se
ans <- processcluster(model1.f, row = 2, z_val = 1.96)
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model1.f, cluster.vcov(model1.f, ~ cluster))
paste("The clustered standard error is", ans[3])
paste("The 95% confidence interval on the entire sample w/ clustering is (", ans[1],",",ans[2],")")
paste("The treatment effect estimate with dummy variable is", signif(summary(model1.f)$coefficients[2,1],3))
# I don't think the following line is necessary but I kept it in anyways
paste("The associated p-value is", signif(summary(model1.f)$coefficients[2,4],3))
paste("The associated cluster-robust p-value is", signif(coeftestvalues[2,4],3))
d <- read.dta("./data/karlan_data_subset_for_class.dta")
head(d)
## Do some quick exploratory data analysis with this data. There are some values in this data that seem a bit strange. Determine what these are, and figure out what you would like to do with them. Also, notice what happens with your estimates vis-a-vis the estimates that are produced by the authors when you do something sensible with this strange values.
summary(d)
View(d)
summary(d)
length(d[d$street == -999])
summary(d)
d[d$street == -999]
summary(d)
d[d$street == -999,]
summary(d)
length(d[d$street == -999,])
summary(d)
length(d[d$street == -999,],2)
summary(d)
d[d$street == -999,].size
summary(d)
d[d$street == -999,].shape
summary(d)
d[d$street == -999,].shape()
summary(d)
nrow(d[d$street == -999,])
summary(d)
# Histogram of street
hist(d$street)
# Figure out how many
nrow(d[d$street == -999,])
summary(d)
# Histogram of street
hist(d$street)
# Figure out how many rows have -999 for street
nrow(d[d$street == -999,])
summary(d)
# Histogram of street
hist(d$street)
# Figure out how many rows have -999 for street
paste("There are", nrow(d[d$street == -999,], "rows in street column with -999")
summary(d)
# Histogram of street
hist(d$street)
# Figure out how many rows have -999 for street
paste("There are", nrow(d[d$street == -999,], "rows in street column with -999"))
summary(d)
# Histogram of street
hist(d$street)
# Figure out how many rows have -999 for street
paste("There are", nrow(d[d$street == -999,]), "rows in street column with -999")
summary(d)
# Histogram of street
hist(d$street)
# Figure out how many rows have -999 for street
paste("There are", nrow(d[d$street == -999,]), "rows in the `street` column with -999")
cleaned_d <- d[!is.na(d$havecell)]
cleaned_d <- d[!is.na(d$havecell) & !is.na(d$street)]
cleaned_d <- d[!is.na(d$havecell) & !is.na(d$street),]
View(d)
cleaned_d <- d[!is.na(d$havecell) & !is.na(d$street) & d$street != -999,]
View(cleaned_d)
# Clean up the data set by removing rows with NA's and -999 from street and havecell
cleaned_d <- d[!is.na(d$havecell) & !is.na(d$street) & d$street != -999,]
model <- lm(avg_bins_treat~bin, data = cleaned_d)
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
summary(d)
# Histogram of street
hist(d$street)
# Figure out how many rows have -999 for street
paste("There are", nrow(d[d$street == -999,]), "rows in the `street` column with -999")
summary(d)
# Histogram of street
hist(d$street)
# Figure out how many rows have -999 for street
paste("There are", nrow(d[d$street == -999,]), "rows in the `street` column with -999")
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
# Clean up the data set by removing rows with NA's and -999 from street and havecell
cleaned_d <- d[!is.na(d$havecell) & !is.na(d$street) & d$street != -999,]
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
summary(model4a)
paste("The treatment effect estimate with dummy variable is", signif(summary(model1.f)$coefficients[2,1],3))
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
summary(model4a)
paste("The treatment effect estimate is", signif(summary(model4a)$coefficients[2,1],3))
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4a, row = 2, z_val = 1.96)
summary(model4a)
paste("The treatment effect estimate is", signif(summary(model4a)$coefficients[2,1],3))
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4a, row = 2, z_val = 1.96)
summary(model4a)
paste("The treatment effect estimate is", signif(summary(model4a)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval (", ans[1],",",ans[2],")")
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4a, row = 2, z_val = 1.96)
summary(model4a)
paste("The treatment effect estimate is", signif(summary(model4a)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4a, row = 2, z_val = 1.96)
summary(model4a)
paste("The treatment effect estimate is", signif(summary(model4a)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
conf.interval(model4a, 2, 1.96)
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4a, row = 2, z_val = 1.96)
summary(model4a)
paste("The treatment effect estimate is", signif(summary(model4a)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4b <- lm(avg_bins_treat ~ bin + base_avg_bins_treat, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4b, row = 2, z_val = 1.96)
summary(model4b)
paste("The treatment effect estimate is", signif(summary(model4b)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4c <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + factor(street), data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4c, row = 2, z_val = 1.96)
summary(model4c)
paste("The treatment effect estimate is", signif(summary(model4c)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4c <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + as.factor(street), data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4c, row = 2, z_val = 1.96)
summary(model4c)
paste("The treatment effect estimate is", signif(summary(model4c)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4c <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + factor(street), data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4c, row = 2, z_val = 1.96)
summary(model4c)
paste("The treatment effect estimate is", signif(summary(model4c)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4c <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + as.factor(street), data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4c, row = 2, z_val = 1.96)
summary(model4c)
paste("The treatment effect estimate is", signif(summary(model4c)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4c <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + factor(street), data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4c, row = 2, z_val = 1.96)
summary(model4c)
paste("The treatment effect estimate is", signif(summary(model4c)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
cleaned_d$nocell <- 1-cleaned_d$havecell
View(cleaned_d)
model4f <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + factor(street) + nocell, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4f, row = 2, z_val = 1.96)
summary(model4f)
paste("The treatment effect estimate is", signif(summary(model4f)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4g <- lm(avg_bins_treat ~ bin + sms + base_avg_bins_treat + factor(street) + nocell, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4f, row = 2, z_val = 1.96)
summary(model4f)
paste("The treatment effect estimate is", signif(summary(model4f)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4g <- lm(avg_bins_treat ~ bin + sms + base_avg_bins_treat + factor(street) + nocell, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4g, row = 2, z_val = 1.96)
summary(model4g)
paste("The treatment effect estimate is", signif(summary(model4g)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
d$nocell <- 1-d$havecell
model4g <- lm(avg_bins_treat ~ bin + sms + base_avg_bins_treat + factor(street) + nocell, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4g, row = 2, z_val = 1.96)
summary(model4g)
paste("The treatment effect estimate is", signif(summary(model4g)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4g <- lm(avg_bins_treat ~ bin + sms + base_avg_bins_treat + factor(street) + nocell, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4g, row = 2, z_val = 1.96)
summary(model4g)
paste("The treatment effect estimate is", signif(summary(model4g)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4h <- lm(avg_bins_treat ~ bin_s + bin_g + sms_p + sms_g + nocell + base_avg_bins_treat
+ factor(street), data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4h, row = 2, z_val = 1.96)
summary(model4h)
paste("The treatment effect estimate is", signif(summary(model4h)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
model4h <- lm(avg_bins_treat ~ bin_g + bin_s + sms_p + sms_g + nocell + base_avg_bins_treat
+ factor(street), data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4h, row = 2, z_val = 1.96)
summary(model4h)
paste("The treatment effect estimate is", signif(summary(model4h)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
d <- read.csv("./data/ebola_rct2.csv")
head(d)
View(d)
model5a <- lm(vomitting_day14 ~ treat_zmapp, data = d)
model5a <- lm(vomiting_day14 ~ treat_zmapp, data = d)
model5a <- lm(vomiting_day14 ~ treat_zmapp, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model5a, row = 2, z_val = 1.96)
summary(model5a)
paste("The treatment effect estimate is", signif(summary(model5a)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
## ? vcovHC
m1$vcovHC <- vcovHC(m1)
coeftest(m1, m1$vcovHC)
## ? vcovHC
m1$vcovHC <- vcovHC(m1)
coeftest(m1)
## ? vcovHC
m1$vcovHC <- vcovHC(m1)
coeftest(m1, m1$vcovHC)
## ? vcovHC
m1$vcovHC <- vcovHC(m1)
coeftest(m1)
## ? vcovHC
m1$vcovHC <- vcovHC(m1)
coeftest(m1, m1$vcovHC)
## ? vcovHC
m1$vcovHC <- vcovHC(m1)
coeftest(m1)
model5a <- lm(vomiting_day14 ~ treat_zmapp, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model5a, row = 2, z_val = 1.96)
# Use coeftest to find the robust p value
coeftestvalues <- coeftest(model5a, vcovHC(model5a))
summary(model5a)
paste("The treatment effect estimate is", signif(summary(model5a)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
paste("The associated p-value is", signif(summary(model5a)$coefficients[2,4],3))
paste("The associated robust p-value is", signif(coeftestvalues[2,4],3))
model5b <- lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model5b, row = 2, z_val = 1.96)
# Use coeftest to find the robust p value
coeftestvalues <- coeftest(model5b, vcovHC(model5b))
summary(model5b)
paste("The treatment effect estimate is", signif(summary(model5b)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
paste("The associated p-value is", signif(summary(model5b)$coefficients[2,4],3))
paste("The associated robust p-value is", signif(coeftestvalues[2,4],3))
summary(lm(treat_zmapp~vomitting_day0, data = d))
summary(lm(treat_zmapp~vomiting_day0, data = d))
model5d <- lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + temperature_day14, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model5d, row = 2, z_val = 1.96)
# Use coeftest to find the robust p value
coeftestvalues <- coeftest(model5d, vcovHC(model5d))
summary(model5b)
paste("The treatment effect estimate is", signif(summary(model5d)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
paste("The associated p-value is", signif(summary(model5d)$coefficients[2,4],3))
paste("The associated robust p-value is", signif(coeftestvalues[2,4],3))
model5d <- lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + temperature_day14, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model5d, row = 2, z_val = 1.96)
# Use coeftest to find the robust p value
coeftestvalues <- coeftest(model5d, vcovHC(model5d))
summary(model5d)
paste("The treatment effect estimate is", signif(summary(model5d)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
paste("The associated p-value is", signif(summary(model5d)$coefficients[2,4],3))
paste("The associated robust p-value is", signif(coeftestvalues[2,4],3))
model5f <- lm(temperature_day14 ~ treat_zmapp + treat_zmapp*male + male
+ vomiting_day0 + temperature_day0, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model5f, row = 2, z_val = 1.96)
# Use coeftest to find the robust p value
coeftestvalues <- coeftest(model5f, vcovHC(model5f))
summary(model5f)
paste("The treatment effect estimate is", signif(summary(model5f)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
paste("The associated p-value is", signif(summary(model5f)$coefficients[2,4],3))
paste("The associated robust p-value is", signif(coeftestvalues[2,4],3))
model5f <- lm(temperature_day14 ~ treat_zmapp + treat_zmapp*male + male
+ vomiting_day0 + temperature_day0, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model5f, row = 2, z_val = 1.96)
# Use coeftest to find the robust p value
coeftestvalues <- coeftest(model5f, vcovHC(model5f))
summary(model5f)
paste("The estimated treatment effect on females only is", signif(summary(model5f)$coefficients[2,1],3))
model5f <- lm(temperature_day14 ~ treat_zmapp + treat_zmapp*male + male
+ vomiting_day0 + temperature_day0, data = d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model5f, row = 2, z_val = 1.96)
# Use coeftest to find the robust p value
coeftestvalues <- coeftest(model5f, vcovHC(model5f))
summary(model5f)
paste("The estimated treatment effect on females only is", signif(summary(model5f)$coefficients[2,1],3))
paste("The estimated treatment effect on males only is", signif(summary(model5f)$coefficients[2,1] + summary(model5f)$coefficients[6,1],3))
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
new_alpha <- alpha/m
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
alpha/m
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
model4a <- lm(avg_bins_treat~bin, data = cleaned_d)
# Use previously defined equations to find robust confidence intervals
ans <- processrobust(model4a, row = 2, z_val = 1.96)
summary(model4a)
paste("The treatment effect estimate is", signif(summary(model4a)$coefficients[2,1],3))
paste("The robust standard error is", ans[3])
paste("The 95% robust confidence interval is (", ans[1],",",ans[2],")")
View(model4a)
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - 2,000(1 - 0.05)^10,000
1 - (1 - 0.05)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - 2,000(1 - 0.05)^10,000
1 - 2000(1 - 0.05)**10000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - 2,000(1 - 0.05)^10,000
1 - 2000(1 - 0.05)**10000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - 2,000(1 - 0.05)^10,000
1 - 2000*(1 - 0.05)**10000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.0001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.00000000001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.0000000001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.0000000001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.000000001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.00000001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.0000001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
1 - (1 - 0.000001)**20000000
# Bonferroni Correction
alpha = 0.05 # significance level of 0.05
m = 20000000 # number of hypotheses being tested
paste("The new significance level should be",alpha/m)
# The probabliity of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level is 1 - (1 - 0.05)^20,000,000
paste("The probability of finding at least one covariate that significantly interacts with the treatment at the 0.05 significance level with 20,000,000 comparisons is",1 - (1 - 0.05)**20000000)
Study1 <- d[d$studyno == 1,]
# Use regression without clustered standard errors
model1.a <- lm(name_recall~treat_ad, data = Study1)
Study1 <- d[d$studyno == 1,]
# Use regression without clustered standard errors
model1.a <- lm(name_recall~treat_ad, data = Study1)
# load packages
library(data.table)
library(foreign)
library(lmtest)
library(sandwich)
library(multiwayvcov)
# Equation to calculate robust standard errors
processrobust <- function(linReg, row, z_val){
# First create a summary of the linReg for confidence interval
model <- summary(linReg)
# Get Variance-Covariance matrix
vcov.robust <- vcovHC(linReg)
# Calculate standard errors by taking the sqrt of the diagonals of vcov
robust.se <- sqrt(diag(vcov.robust))
# Calculate the 95% confidence interval using cluster se
slope <- model$coefficients[row,1]
l_bound <- signif(slope - z_val*robust.se, 3)
u_bound <- signif(slope + z_val*robust.se, 3)
# return lower bound, upper bound, cluster se
return(c(l_bound[row], u_bound[row], signif(robust.se[row],3)))
}
# Equation to calculate clustered standard errors and confidence interval
processcluster <- function(linReg, row, z_val) {
# First create a summary of the linReg for confidence interval
model <- summary(linReg)
# Get clustered Variance-Covariance matrix
vcov.cluster <- cluster.vcov(linReg, ~ cluster)
# Calculate standard errors by taking the sqrt of the diagonals of vcov
cluster.se <- sqrt(diag(vcov.cluster))
# Calculate the 95% confidence interval using cluster se
slope <- model$coefficients[row,1]
l_bound <- signif(slope - z_val*cluster.se, 3)
u_bound <- signif(slope + z_val*cluster.se, 3)
# return lower bound, upper bound, cluster se
return(c(l_bound[row], u_bound[row], signif(cluster.se[row],3)))
}
# Equation to calculate the default confidence interval
conf.interval <- function(linReg, row, z_val) {
# 95% confidence interval = Estimate +/- 1.96(Std. Error)  slope <- model$coefficients[row,1]
model <- summary(linReg)
std.err <- model$coefficients[row,2]
slope <- model$coefficients[row,1]
l_bound <- signif(slope - z_val*std.err, 3)
u_bound <- signif(slope + z_val*std.err, 3)
return(c(l_bound, u_bound))
}
d <- read.csv("./data/broockman_green_anon_pooled_fb_users_only.csv")
Study1 <- d[d$studyno == 1,]
# Use regression without clustered standard errors
model1.a <- lm(name_recall~treat_ad, data = Study1)
# Compute a confidence interval for the effect of the ad on name_recall
c_int <- conf.interval(model1.a, row = 2, z_val = 1.96)
# Compute a robust confidence interval for the effect of the ad on name_recall
ans <- processrobust(model1.a, row = 2, z_val = 1.96)
paste("The 95% confidence interval on only Study 1 w/o clustering is (", c_int[1],",",c_int[2],")")
paste("The robust standard error is", ans[3])
paste("The robust 95% confidence interval on only Study 1 w/o clustering is (", ans[1],",",ans[2],")")
