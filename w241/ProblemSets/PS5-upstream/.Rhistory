placeboTest <- lm(week3 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week2 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week3 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week4 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week2 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week3 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week4 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week5 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week6 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
placeboTest <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
dA <- d1[d1$product_b == 0]
dB <- d1[d1$product_b == 1]
placeboTest <- lm(week0 ~ treatment_ad_exposures_week1, data = d1)
summary(placeboTest)
View(dA)
# Placebo Test for only product A in March
placeboTest <- lm(week0 ~ treatment_ad_exposures_week1, data = dA)
summary(placeboTest)
# Placebo Test for only product A in March
placeboTest <- lm(week0 ~ treatment_ad_exposures_week1, data = dA)
summary(placeboTest)
# Placebo Test for only product B in August
placeboTest <- lm(week0 ~ treatment_ad_exposures_week1, data = dB)
summary(placeboTest)
# Placebo Test for only product A
placeboTest <- lm(week0 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dA)
summary(placeboTest)
# Placebo Test for only product B
placeboTest <- lm(week0 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dB)
summary(placeboTest)
# Regression for both product A and B
placeboTest <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
# Regression for both product A and B
modelAB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(modelAB)
# Regression for only product A
modelA <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dA)
summary(modelA)
# Regression for only product B
modelB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dB)
summary(modelB)
# Regression for both product A and B
modelAB <- lm(week1+week2+week3+week4+week5+week6+week7+week8+week9+week10 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(modelAB)
# Regression for both product A and B
modelAB <- lm(week1+week2+week3+week4+week5+week6+week7+week8+week9+week10 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(modelAB)
d1$total_purchases <- d1$week1+d1$week2+d1$week3+d1$week4+d1$week5+d1$week6+d1$week7+d1$week8+d1$week9+d1$week10
modelAB <- lm(total_purchases ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(modelAB)
# Regression for both product A and B
d1$total_purchases <- d1$week1+d1$week2+d1$week3+d1$week4+d1$week5+d1$week6+d1$week7+d1$week8+d1$week9+d1$week10
modelAB <- lm(total_purchases ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(modelAB)
# Regression for only product A
dA$total_purchases <- dA$week1+dA$week2+dA$week3+dA$week4+dA$week5+dA$week6+dA&week7+dA$week8+dA$week9+dA$week10
# Regression for only product A
dA$total_purchases <- dA$week1+dA$week2+dA$week3+dA$week4+dA$week5+dA$week6+dA&week7+dA$week8+dA$week9+dA$week10
# Regression for only product A
dA$total_purchases <- dA$week1+dA$week2+dA$week3+dA$week4+dA$week5+dA$week6+dA$week7+dA$week8+dA$week9+dA$week10
modelA <- lm(total_purchases ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dA)
summary(modelA)
# Regression for only product B
dB$total_purchases <- dB$week1+dB$week2+dB$week3+dB$week4+dB$week5+dB$week6+dB$week7+dB$week8+dB$week9+dB$week10
modelB <- lm(total_purchases ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dB)
summary(modelB)
# Placebo Test for both product A and B
placeboTest <- lm(week0 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(placeboTest)
# Regression for both product A and B
d1$total_after_purchases <- d1$week2+d1$week3+d1$week4+d1$week5+d1$week6+d1$week7+d1$week8+d1$week9+d1$week10
modelAB <- lm(total_after_purchases ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(modelAB)
# Regression for only product A
dA$total_afeter_purchases <- dA$week2+dA$week3+dA$week4+dA$week5+dA$week6+dA$week7+dA$week8+dA$week9+dA$week10
modelA <- lm(total_after_purchases ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dA)
# Regression for only product A
dA$total_after_purchases <- dA$week2+dA$week3+dA$week4+dA$week5+dA$week6+dA$week7+dA$week8+dA$week9+dA$week10
modelA <- lm(total_after_purchases ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dA)
summary(modelA)
# Regression for only product B
dB$total_after_purchases <- dB$week2+dB$week3+dB$week4+dB$week5+dB$week6+dB$week7+dB$week8+dB$week9+dB$week10
modelB <- lm(total_after_purchases ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = dB)
summary(modelB)
# Regression for both product A and B
modelAB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1 + product_b, data = d1)
summary(modelAB)
View(dB)
# Regression for both product A and B
modelAB <- lm(week1 ~ product_b + treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d1)
summary(modelAB)
# Regression for both product A and B
modelAB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1 + product_b, data = d1)
summary(modelAB)
# Regression for both product A and B
modelAB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1 + treatment_ad_exposures_week1*product_b, data = d1)
summary(modelAB)
# Regression for both product A and B
modelAB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1 + treatment_ad_exposures_week1*product_b, data = d1)
summary(modelAB)
# Regression for both product A and B
modelAB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1 + product_b + treatment_ad_exposures_week1*product_b, data = d1)
summary(modelAB)
# Regression for both product A and B
modelAB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1 + treatment_ad_exposures_week1*product_b, data = d1)
summary(modelAB)
# Regression for both product A and B
modelAB <- lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1 + product_b + treatment_ad_exposures_week1*product_b, data = d1)
summary(modelAB)
d2 <- fread("./data/ps5_no2.csv")
View(d2)
model <- lm(income~years_education, data = d2)
summary(model)
if (d2$draft_number <= 80) {
d2$high_rank <- 1
}
else {
if (d2$draft_number <= 80) {
d2$high_rank <- 1
} else {
d2$high_rank <- 0
}
View(d2)
d2$high_rank <- d2$draft_number <= 80
View(d2)
d2$high_rank <- as.numeric(d2$draft_number <= 80)
View(d2)
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
d <- read.csv("./data/broockman_green_anon_pooled_fb_users_only.csv")
View(d)
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
library(data.table)
library(stargazer)
library(dplyr)
library(foreign)
library(lmtest)
library(sandwich)
library(multiwayvcov)
d1 <- fread('./data/ps5_no1.csv')
d1
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
cluster.se <- sqrt(diag(vcov.cluster))
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
cluster.se <- sqrt(diag(vcov.cluster))
cluster.se
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm.cluster(years_education~high_rank, data = d2, cluster = high_rank)
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm.cluster(years_education~high_rank, data = d2, cluster = high_rank)
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm.cluster(years_education~high_rank, data = d2, cluster = high_rank)
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2, cluster = high_rank)
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ factor(high_rank)))
cluster.se
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ factor(high_rank)))
cluster.se
ceoftestvalues
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ factor(high_rank)))
cluster.se
coeftestvalues
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ high_rank))
cluster.se
coeftestvalues
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ high_rank))
cluster.se
coeftestvalues
d2 <- fread("./data/ps5_no2.csv")
model <- lm(income~years_education, data = d2)
summary(model)
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ high_rank))
cluster.se
library(data.table)
library(stargazer)
library(dplyr)
library(foreign)
library(lmtest)
library(sandwich)
library(multiwayvcov)
d1 <- fread('./data/ps5_no1.csv')
d1
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ high_rank))
cluster.se
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ high_rank))
#cluster.se
coeftestvalues
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ draft_number))
#cluster.se
coeftestvalues
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ draft_number))
#cluster.se
coeftestvalues
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ d2$draft_number))
#cluster.se
coeftestvalues
# Create a dummy variable indicating whether a person is a high-ranked draft
d2$high_rank <- as.numeric(d2$draft_number <= 80)
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(years_education~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ draft_number))
#cluster.se
coeftestvalues
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(income~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ draft_number)) # TODO ~ high_rank
#cluster.se
coeftestvalues
# Using regression, estimate the effect of having a high-ranked draft number on years of education obtained
model <- lm(income~high_rank, data = d2)
summary(model)
# First create a summary of the linReg for confidence interval
#model_summary <- summary(model)
# Get clustered Variance-Covariance matrix
#vcov.cluster <- cluster.vcov(model, ~ factor(high_rank))
# Calculate standard errors by taking the sqrt of the diagonals of vcov
#cluster.se <- sqrt(diag(vcov.cluster))
# Use coeftest to find the cluster-robust p value
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ high_rank)) # TODO ~ high_rank
#cluster.se
coeftestvalues
View(d2)
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)[3]
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)[2]
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)$ceoff
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)$coeff
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)$coef
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)$coef[2]
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)$coef[]
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
summary(model1)$coef[2]
# Divide the estimate from part (d) by the eestimate in part (c) to estimate the effect of education on income.
model1 <- lm(years_education~high_rank, data = d2)
model2 <- lm(income~high_rank, data = d2)
clean.change.in.x <- summary(model1)$coef[2]
clean.change.in.y <- summary(model2)$coef[2]
clean.change.in.y/clean.change.in.x
df_2g = df2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
df_2g = df2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
df_2g = d2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
lr_2g = lm(number ~ high_rank, data = df_2g)
summary(lr_2g)
View(df_2g)
df_2g = d2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
lr_2g = lm(number ~ high_rank, data = df_2g)
summary(lr_2g)
len(na.omit(d2$income))
df_2g = d2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
lr_2g = lm(number ~ high_rank, data = df_2g)
summary(lr_2g)
length(na.omit(d2$income))
df_2g = d2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
lr_2g = lm(number ~ high_rank, data = df_2g)
summary(lr_2g)
as.data.table(d2)
df_2g = d2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
lr_2g = lm(number ~ high_rank, data = df_2g)
summary(lr_2g)
d2 <- as.data.table(d2)
View(d2)
df_2g = d2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
lr_2g = lm(number ~ high_rank, data = df_2g)
summary(lr_2g)
d2 <- as.data.table(d2)
d2g <- d2[, .(.N), by = .(draft_number)]
View(d2g)
df_2g = d2 %>% group_by(draft_number) %>% summarise(number = n(), high_rank = mean(high_rank))
lr_2g = lm(number ~ high_rank, data = df_2g)
summary(lr_2g)
d2 <- as.data.table(d2)
d2g <- d2[, .(.N), by = .(draft_number, high_rank)]
View(d2)
View(d2g)
# First convert data frame into a data table
d2 <- as.data.table(d2)
# Then create a aggregate table to count the number of rows with each draft_number
d2g <- d2[, .(.N), by = .(draft_number, high_rank)]
# Create a linear regression
model <- lm(N ~ high_rank, data = d2g)
summary(model)
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ draft_number)) # TODO ~ high_rank
# First convert data frame into a data table
d2 <- as.data.table(d2)
# Then create a aggregate table to count the number of rows with each draft_number
d2g <- d2[, .(.N), by = .(draft_number, high_rank)]
# Create a linear regression
model <- lm(N ~ high_rank, data = d2g)
summary(model)
coeftestvalues <- coeftest(model, cluster.vcov(model, ~ draft_number)) # TODO ~ high_rank
coeftestvalues
