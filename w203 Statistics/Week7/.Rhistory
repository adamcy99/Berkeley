?norm
?normal
dnorm(5)
dnorm0
dnorm(0)
dnorm(0,2)
rnorm(2)
mean(rnorm(10))
mean(rnorm(10000))
sim_conf_int = function(n, alpha) {
# Your code to
# 1. simulate n draws from a standard normal dist.
draws = rnorm(n)
# 2. compute a confidence interval with confidence level alpha
xbar = mean(draws)
s = sd(draws)
z = qnorm(1-(1-alpha)/2)
return(c(xbar-z*s/sqrt(n), xbar+z*s/sqrt(n)))  # replace with the interval you compute.
}
many_conf_int = function(m, n, alpha) {
results = NULL
for(i in 1:m) {
interval = sim_conf_int(n, alpha)
results = rbind(results, c(interval[1], interval[2], interval[1]<0 & interval[2]>0))
}
resultsdf = data.frame(results)
names(resultsdf) = c("low", "high", "captured")
return(resultsdf)
}
n = 20
cints = many_conf_int(100, n, .05)
plot(NULL, type="n",xlim=c(1,100),ylim=c(min(cints$low), max(cints$high)), xlab="Trial",ylab=expression(mu),pch=19)
abline(h = c(0, qt(0.975, n-1)/sqrt(n), qt(0.025, n-1)/sqrt(n)), lty = c(1,2,2), col = "gray")
points(cints$high, col = 2+cints$captured, pch = 20)
points(cints$low, col = 2+cints$captured, pch = 20)
for(i in 1:100)
{
lines(c(i,i), c(cints$low[i],cints$high[i]), col = 2+cints$captured[i], pch = 19)
}
title(expression(paste("Simulation of t-Confidence Intervals for ", mu,
" with Sample Size 20")))
legend(0,-.65, legend = c(expression(paste(mu," Captured")),
expression(paste(mu," Not Captured"))), fill = c(3,2))
sim_conf_int = function(n, alpha) {
# Your code to
# 1. simulate n draws from a standard normal dist.
draws = rnorm(n)
# 2. compute a confidence interval with confidence level alpha
xbar = mean(draws)
s = sd(draws)
z = qnorm(alpha/2)
return(c(xbar-z*s/sqrt(n), xbar+z*s/sqrt(n)))  # replace with the interval you compute.
}
many_conf_int = function(m, n, alpha) {
results = NULL
for(i in 1:m) {
interval = sim_conf_int(n, alpha)
results = rbind(results, c(interval[1], interval[2], interval[1]<0 & interval[2]>0))
}
resultsdf = data.frame(results)
names(resultsdf) = c("low", "high", "captured")
return(resultsdf)
}
n = 20
cints = many_conf_int(100, n, .05)
plot(NULL, type="n",xlim=c(1,100),ylim=c(min(cints$low), max(cints$high)), xlab="Trial",ylab=expression(mu),pch=19)
abline(h = c(0, qt(0.975, n-1)/sqrt(n), qt(0.025, n-1)/sqrt(n)), lty = c(1,2,2), col = "gray")
points(cints$high, col = 2+cints$captured, pch = 20)
points(cints$low, col = 2+cints$captured, pch = 20)
for(i in 1:100)
{
lines(c(i,i), c(cints$low[i],cints$high[i]), col = 2+cints$captured[i], pch = 19)
}
title(expression(paste("Simulation of t-Confidence Intervals for ", mu,
" with Sample Size 20")))
legend(0,-.65, legend = c(expression(paste(mu," Captured")),
expression(paste(mu," Not Captured"))), fill = c(3,2))
sim_conf_int = function(n, alpha) {
# Your code to
# 1. simulate n draws from a standard normal dist.
draws = rnorm(n)
# 2. compute a confidence interval with confidence level alpha
xbar = mean(draws)
s = sd(draws)
z = qnorm((1-alpha)/2)
return(c(xbar-z*s/sqrt(n), xbar+z*s/sqrt(n)))  # replace with the interval you compute.
}
many_conf_int = function(m, n, alpha) {
results = NULL
for(i in 1:m) {
interval = sim_conf_int(n, alpha)
results = rbind(results, c(interval[1], interval[2], interval[1]<0 & interval[2]>0))
}
resultsdf = data.frame(results)
names(resultsdf) = c("low", "high", "captured")
return(resultsdf)
}
n = 20
cints = many_conf_int(100, n, .05)
plot(NULL, type="n",xlim=c(1,100),ylim=c(min(cints$low), max(cints$high)), xlab="Trial",ylab=expression(mu),pch=19)
abline(h = c(0, qt(0.975, n-1)/sqrt(n), qt(0.025, n-1)/sqrt(n)), lty = c(1,2,2), col = "gray")
points(cints$high, col = 2+cints$captured, pch = 20)
points(cints$low, col = 2+cints$captured, pch = 20)
for(i in 1:100)
{
lines(c(i,i), c(cints$low[i],cints$high[i]), col = 2+cints$captured[i], pch = 19)
}
title(expression(paste("Simulation of t-Confidence Intervals for ", mu,
" with Sample Size 20")))
legend(0,-.65, legend = c(expression(paste(mu," Captured")),
expression(paste(mu," Not Captured"))), fill = c(3,2))
sim_conf_int = function(n, alpha) {
# Your code to
# 1. simulate n draws from a standard normal dist.
draws = rnorm(n)
# 2. compute a confidence interval with confidence level alpha
xbar = mean(draws)
s = sd(draws)
z = qnorm(1-(1-alpha)/2)
return(c(xbar-z*s/sqrt(n), xbar+z*s/sqrt(n)))  # replace with the interval you compute.
}
many_conf_int = function(m, n, alpha) {
results = NULL
for(i in 1:m) {
interval = sim_conf_int(n, alpha)
results = rbind(results, c(interval[1], interval[2], interval[1]<0 & interval[2]>0))
}
resultsdf = data.frame(results)
names(resultsdf) = c("low", "high", "captured")
return(resultsdf)
}
n = 20
cints = many_conf_int(100, n, .05)
plot(NULL, type="n",xlim=c(1,100),ylim=c(min(cints$low), max(cints$high)), xlab="Trial",ylab=expression(mu),pch=19)
abline(h = c(0, qt(0.975, n-1)/sqrt(n), qt(0.025, n-1)/sqrt(n)), lty = c(1,2,2), col = "gray")
points(cints$high, col = 2+cints$captured, pch = 20)
points(cints$low, col = 2+cints$captured, pch = 20)
for(i in 1:100)
{
lines(c(i,i), c(cints$low[i],cints$high[i]), col = 2+cints$captured[i], pch = 19)
}
title(expression(paste("Simulation of t-Confidence Intervals for ", mu,
" with Sample Size 20")))
legend(0,-.65, legend = c(expression(paste(mu," Captured")),
expression(paste(mu," Not Captured"))), fill = c(3,2))
